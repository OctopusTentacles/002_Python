# Задача 4. Продвинутая функция sum
# Что нужно сделать
# Как вы знаете, в Python есть полезная функция sum, которая умеет 
# находить сумму элементов списков. Но иногда базовых возможностей 
# функций не хватает для работы и приходится их усовершенствовать.

# Напишите свою функцию sum, которая должна быть более гибкой, 
# чем стандартная функция sum. Она должна уметь:

# складывать числа из списка списков;
# складывать числа из набора параметров.
# Основной код оставьте пустым или закомментированным 
# (используйте его только для тестирования).

# Примеры вызовов функции:
# sum([[1, 2, [3]], [1], 3])
# Ответ в консоли: 10

# sum(1, 2, 3, 4, 5)
# Ответ в консоли: 15


def extended_sum(*data, summa = 0):
    for sym in data:
        if isinstance(sym, int):
            summa += sym
        elif isinstance(sym, (list)):
            summa += extended_sum(*sym)
    return summa


print(extended_sum([[1, 2, [3]], [1], 3]))
print(extended_sum(1, 2, 3, 4, 5))

# если в листе лист ([1, 2, [3]]) - нам надо разложить его на цифры
# чтобы сложить. для этого надо передать в функцию вложенный лист 
# (extended_sum(*sym)) * если в листе несколько значений.
# и пройти циклом - получится сумма, которая при возрате
# summa += extended_sum(*sym) прибавится к предыдущей сумме

# не могу в голове осмыслить рекурсию, решение представляю,
# но написать сразу не могу - методом тыка и отладки только (((
# много времени уходит