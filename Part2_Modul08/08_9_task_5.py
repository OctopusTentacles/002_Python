# Задача 5. Список списков — 2
# Что нужно сделать
# Вы уже работали с многомерными списками и решали задачи, 
# где с помощью list comprehensions «выпрямляли» многомерные списки в один. 
# Это не получится, если списков неограниченное количество 
# и у элементов разные уровни вложенности.
# Дан такой список:
# nice_list = [1, 2, [3, 4], [[5, 6, 7], [8, 9, 10]], 
#              [[11, 12, 13], [14, 15], [16, 17, 18]]]
# Напишите рекурсивную функцию, которая раскрывает все вложенные списки, 
# то есть оставляет только внешний список. 

# Ответ: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]

# Функция должна получать список и возвращать его раскрытую версию 
# (не нужно добавлять элементы в список, записанный в глобальную переменную, 
# созданную снаружи функции).

# Подсказка
# Можно возвращать списки и срезы списков.


def expand_list(data):

    if data == []:
        return data
    if isinstance(data[0], list):
        return (expand_list(data[0]) + expand_list(data[1:]))
    return data[:1] + expand_list(data[1:])

nice_list = [1, 2, [3, 4], [[5, 6, 7], [8, 9, 10]], 
             [[11, 12, 13], [14, 15], [16, 17, 18]]]

print(expand_list(nice_list))

# сложно для меня, сам не смог, 
# разбирался с google + debug + python console
# как я понял:
# мы берем первый элемент - если не лист - выкидываем его в принт
# (поправка - сохраняем в return как [1] + ...)
# в функцию возвращаем срез без первого элемента
# если лист - возврат в функцию + возврат среза без первого элемента
# когда у первого листа все элементы выкинутся  - 
# возвращаемся к срезу без первого элемента и по новой
# [] - точка возврата из рекурсии

# единственное я хочу уточнить что происходит в принте???
# первый возврат из функции - [1], потом [2], [3]
# то есть в принте получается такая картина [1][2][3][4]????
# почему или как становится [1, 2, 3, 4]????

# смотрел на код..........
# в принт уходит один возврат, да?
# return [1] + [2] + [3] + [4]???
# print получается [1, 2, 3, 4]???