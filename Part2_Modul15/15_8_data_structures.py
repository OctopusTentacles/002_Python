# 15.8 Готовые реализации структур данных: графы, хеш-таблицы и деревья префиксов
# В этом материале вы:

# познакомитесь с теорией о графах, хеш-таблицах, деревьях префиксов;
# узнаете о библиотеках и модулях, которые помогают с ними работать;
# рассмотрите примеры реализации этих структур данных и примеры работ 
# с кодом из библиотек и модулей.

# Графы
# Теория о графах
# Граф — абстрактная структура данных, представляющая собой набор вершин (узлов) 
# и рёбер (связей) между этими вершинами. Его используют для моделирования 
# различных взаимосвязей и отношений между объектами.

# Графы похожи на деревья, так как обе структуры — это наборы узлов и связей 
# между ними. Однако, в отличие от деревьев, графы могут содержать циклы 
# (но не привычные нам циклы for и while, а замкнутые обходы вершин) 
# и необязательно имеют одну корневую вершину.

# Разработка социальных сетей
# Графы могут представлять друзей или связи между людьми, позволяя анализировать 
# сетевую структуру и находить сообщества или влиятельных участников.
# Маршрутизация сетей
# Графы могут моделировать сетевую инфраструктуру, в которой вершины представляют узлы, 
# а рёбра — соединения между ними, что позволяет оптимизировать маршруты передачи данных.
# Оптимизация путей
# В работе курьеров и служб доставки. Применение графов в этом контексте позволяет эффективно 
# находить оптимальные маршруты доставки и учитывать различные факторы, 
# например расстояние, время доставки, пробки и другие ограничения.

# Библиотеки и модули с реализацией графов
# =======================================================================================

# NetworkX

# Установка библиотеки NetworkX

# Убедитесь, что на вашем компьютере установлен Python.
# Откройте командную строку или терминал.
# Установите библиотеку NetworkX с помощью команды pip:
# pip install networkx==3.1

# Установка через pip даст вам доступ к основным функциям библиотеки.

import networkx as nx
import matplotlib.pyplot as plt

# Создание пустого графа
graph = nx.Graph()

# Добавление вершин
graph.add_node("A")
graph.add_nodes_from(["B", "C", "D"])

# Добавление рёбер
graph.add_edge("A", "B")
graph.add_edges_from([("B", "C"), ("C", "D"), ("D", "A")])

# Получение списка вершин и рёбер
nodes = graph.nodes()
edges = graph.edges()

# Визуализация графа
nx.draw(graph, with_labels=True, node_color='lightblue', edge_color='gray')
plt.show()
# =======================================================================================

# Igraph

# Установка библиотеки igraph

# Убедитесь, что на вашем компьютере установлен Python.
# Откройте командную строку или терминал.
# Установите библиотеку igraph с помощью команды pip:
# pip install python-igraph==0.10.4

import igraph as ig

# Создание пустого графа
graph = ig.Graph()

# Добавление вершин
graph.add_vertices(4)

# Добавление рёбер
graph.add_edges([(0, 1), (1, 2), (2, 3), (3, 0)])

# Получение списка вершин и рёбер
nodes = graph.vs
edges = graph.es

# Визуализация графа
layout = graph.layout("circle")
ig.plot(graph, layout=layout, vertex_color='lightblue', edge_color='gray')
# =======================================================================================

# Хеш-таблицы

# Хеш-таблица — структура данных, предназначенная для эффективного хранения и поиска 
# пар «ключ — значение». Она использует хеш-функцию для преобразования ключа в индекс, 
# по которому происходит доступ к значению.

# Кеширование
# Хеш-таблицы могут использоваться для кеширования результатов вычислений или запросов, 
# ускоряя повторные доступы к данным.
# Поиск и индексация
# Хеш-таблицы обеспечивают быстрый доступ к данным по ключу — это полезно, например, 
# при поиске, индексации или установлении соответствий между объектами.

class HashTable:
    def __init__(self):
        self.size = 10 # Размер хеш-таблицы
        self.table = [None] * self.size # Инициализация массива с None

    def _hash_function(self, key):
        return hash(key) % self.size # Хеш-функция, преобразующая ключ в индекс

    def insert(self, key, value):
        index = self._hash_function(key)
        self.table[index] = value # Вставка значения по соответствующему индексу

    def get(self, key):
        index = self._hash_function(key)
        return self.table[index] # Получение значения по ключу

    def remove(self, key):
        index = self._hash_function(key)
        self.table[index] = None # Удаление значения по ключу

# Модуль hashlib для вычисления хеш-значения строки с использованием SHA-256:

import hashlib
data = "Hello, World!"
hash_object = hashlib.sha256(data.encode())
hex_digest = hash_object.hexdigest()
print(hex_digest) # Выводит хеш-значение SHA-256

# Библиотека mmh3 (MurmurHash) для вычисления хеш-значения строки:

import mmh3
data = "Hello, World!"
hash_value = mmh3.hash(data)
print(hash_value)  # Выводит хеш-значение MurmurHash

# Библиотека pyhash для вычисления CRC32 хеш-значения строки:

import pyhash
data = "Hello, World!"
crc32_hasher = pyhash.crc32()
hash_value = crc32_hasher(data)
print(hash_value)  # Выводит хеш-значение CRC32