# Задача 2. Старая задача
# Возьмите любую задачу из домашнего задания, например, предыдущего модуля 
# и оформите её решение в виде try except finally (можно ещё и else), 
# обрабатывая возможные ошибки.

# Посмотрев на то, что получилось, попробуйте ответить себе на такой вопрос: 
# когда стоит использовать обработку исключений и когда она будет излишней?

import os


def find_file(cur_path, file_name):
    for i_path in os.listdir(cur_path):
        path = os.path.join(cur_path, file_name)
        if i_path == file_name:
            print('Наш файл лежит в:', path)
        elif os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                break
    
    



cur_dir = os.path.dirname(__file__)
try:
    print(find_file(cur_dir, '23.3.txt'))
except(TypeError, PermissionError) as exc:
    print(exc, type(exc))

# Хоть проверка исключений и является мощным инструментом, НО отдавать предпочтение нужно простым проверкам (избежать исключения лучше)
# Если же мы не уверены в появлении ошибки (например у нас нет власти над источником ошибки - это может быть какой-то сторонний сервис)
# И если простая проверка не поможет учесть все варианты - мы можем использовать исключения.
# НО даже в этом случае, старайтесь разделять исключения, которые вы выбрасываете специально и исключения которые могут появиться случайно.
# Причина такой осторожности в том, что мы можем запутаться и поймать например исключение, о котором мы не догадывались. А если мы его
# поймаем и не увидим - мы можем пропустить ошибку в нашем коде.