# Что такое ORM

# Ранее мы рассмотрели взаимодействие с базой данных с помощью SQL-запросов. 
# У такого подхода есть большой минус — ненадёжность. Запросы получаются громоздкими, 
# и в них легко ошибиться. В результате исполнения запроса получаются кортежи, 
# поэтому можно прогадать с индексами.

# Эту проблему решает такая технология, как ORM (Object-Relational Mapping). 
# Она предоставляет удобный интерфейс, который связывает базу данных и объекты в коде.

# Например, в приложении приюта для домашних питомцев есть модель «Кот». 
# Она представлена как в базе данных:
# CREATE TABLE IF NOT EXISTS cats (
#     id INTEGER PRIMARY KEY AUTOINCREMENT,
#     name TEXT,
#     age_months INTEGER
# );


# так и в самом приложении:
class Cat:
    id: int
    name: str
    age_months: int

# Какие действия мы совершаем, чтобы получить список котов?

# Делаем запрос в базу данных.
# Получаем список кортежей.
# Преобразуем список кортежей в список котов.
# По факту мы работаем с двумя моделями, которые идентичны по смыслу.

# При работе с ORM действия будут такими:

# Получаем список котов.
# Да, вот так всё просто.

# В Python существует множество ORM-библиотек. Некоторые из них:

# SQLAlchemy,
# Django ORM,
# Peewee,
# Pony ORM,
# Tortoise ORM,
# SQLObject.

# =======================================================================================  
# Peewee
    
# pip install peewee==3.15.4
    
# В качестве базы данных выберем SQLite. Создадим нашу первую модель:
from peewee import SqliteDatabase, Model, CharField, IntegerField
# подключаемся к базе данных my_database.db
db = SqliteDatabase("my_database.db")

# создаём модель User
class User(Model):
    # имя пользователя, CharField -- строка
     name = CharField()
    # возраст пользователя, IntegerField -- целое число
     age = IntegerField()
    
    # во внутреннем классе Meta указываем нашу базу данных
    class Meta:
         database = db

# создаём таблицу users в базе данных
db.create_tables([User])

# Добавим пользователей в базу данных:
user1 = User(name="Дима", age=25)
user1.save()
user2 = User(name="Костя", age=30)
user2.save()

# Выведем пользователей:
users = User.select() # получаем список пользователей
for user in users:
    print(user.name, user.age)
# Дима 25
# Костя 30
    
# Для получения объекта из базы используется метод .get с перечислением критериев поиска:
retrieved_user = User.get(User.name == "Дима")

# Изменить модель так же просто, как и создать её:
retrieved_user.name = "Дмитрий"
retrieved_user.save()

# Удалить модель можно с помощью метода .delete_instance:
user2.delete_instance()

# Мы рассмотрели базовые возможности Peewee. Теперь создадим приближенный 
# к реальности проект в связке с pyTelegramBotAPI.