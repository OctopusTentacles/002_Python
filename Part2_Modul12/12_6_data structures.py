"""
12.6 Готовые реализации структур данных: очередь, стек, бинарное дерево

Модуль collections
Наиболее популярные и полезные структуры данных модуля

1. deque
Представляет собой двустороннюю очередь. Позволяет добавлять и удалять 
элементы как в начале, так и в конце очереди. 
Пример использования:
"""
from collections import deque
queue = deque()
queue.append(1) # Добавление элемента в конец очереди
queue.append(2)
queue.appendleft(3) # Добавление элемента в начало очереди

print(queue) # Вывод: deque([3, 1, 2])

item = queue.popleft() # Удаление и получение элемента из начала очереди
print(item) # Вывод: 3

"""
2. сounter
Используется для подсчёта объектов, с его помощью удобно проводить 
операции подсчёта и анализа данных. 
Пример использования:
"""
from collections import Counter

data = [1, 2, 3, 1, 2, 1, 3, 4, 5, 4, 2, 1]
counter = Counter(data)

print(counter) # Вывод: Counter({1: 4, 2: 3, 3: 2, 4: 2, 5: 1})
print(counter[1]) # Вывод: 4 (количество вхождений элемента 1)

most_common = counter.most_common(2)
print(most_common) # Вывод: [(1, 4), (2, 3)] (наиболее часто встречающиеся элементы)

"""
3. namedtuple
Позволяет создавать именованные кортежи, которые являются неизменяемыми 
коллекциями элементов с доступом по именам. 
Пример использования:
"""
from collections import namedtuple

Point = namedtuple('Point', ['x', 'y'])
p = Point(2, 3)

print(p.x) # Вывод: 2
print(p.y) # Вывод: 3

"""4. defaultdict
defaultdict — это подкласс словаря, который предоставляет значение по 
умолчанию для отсутствующих в словаре ключей. Это удобно при обработке словаря, 
когда нужно избежать проверок наличия ключей. 

Это позволяет добавлять значения к ключам без предварительной проверки 
их существования. Если вы обратитесь к несуществующему ключу, 
defaultdict автоматически создаст новую запись со значением по умолчанию.

Таким образом, использование defaultdict позволяет сделать код более 
читабельным и избежать необходимости проверки наличия ключей в словаре 
перед добавлением или обращением к ним.
Пример использования:"""

from collections import defaultdict

# Создание defaultdict со значением по умолчанию — пустым списком
d = defaultdict(list)

d['apple'].append('red') # Добавление значения 'red' к ключу 'apple'
d['banana'].append('yellow') # Добавление значения 'yellow' к ключу 'banana'
d['apple'].append('green') # Добавление значения 'green' к ключу 'apple'

print(d) # Вывод: defaultdict(<class 'list'>, {'apple': ['red', 'green'], 'banana': ['yellow']})
print(d['apple']) # Вывод: ['red', 'green']

print(d['banana']) # Вывод: ['yellow']

print(d['cherry']) # Вывод: [] (пустой список, значение по умолчанию)
print(d) # Вывод: defaultdict(<class 'list'>, {'apple': ['red', 'green'], 
         # 'banana': ['yellow'], 'cherry': []})


"""Очереди Queue и LifoQueue"""

"""Queue
Queue из модуля queue представляет собой осуществление потокобезопасной 
очереди (queue) в Python. Она реализует принцип First-In/First-Out (FIFO), 
«первый вошёл — первый вышел», то есть работает как обычная, привычная вам, 
очередь (пришёл в магазин, встал в начало очереди — первым купил товар, 
встал в конец очереди — последним купил товар).

Этот класс предоставляет методы для добавления и удаления элементов из очереди 
и может использоваться для синхронизации данных между потоками в многопоточных приложениях.

Некоторые основные аспекты и примеры использования Queue:"""

from queue import Queue

# Создание экземпляра очереди
q = Queue()

# Добавление элементов в очередь
q.put(1)
q.put(2)
q.put(3)

# Получение и удаление элемента из очереди
item = q.get()
print(item) # Вывод: 1

# Проверка, пуста ли очередь
is_empty = q.empty()
print(is_empty) # Вывод: False

# Получение размера очереди
size = q.qsize()
print(size) # Вывод: 2
# Очистка очереди
q.queue.clear()

# Проверка, пуста ли очередь после очистки
is_empty = q.empty()
print(is_empty) # Вывод: True